{"version":3,"sources":["components/ImagePreview.tsx","components/Recipe.tsx","components/RecipeModal.tsx","components/TextInput.tsx","components/ImageInput.tsx","components/RecipeList.tsx","redux/actions/recipeActions.ts","redux/types/recipeTypes.ts","redux/reducers/recipeReducer.ts","config/recipes.ts","redux/reducers/index.ts","redux/store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ImagePreview","state","src","failed","onError","setState","className","this","props","undefined","alt","nextProps","prevState","React","Component","Recipe","isOpen","toggle","url","title","ingredients","directions","editRecipe","deleteRecipe","ListGroupItem","onClick","data-testid","icon","faTrash","faEdit","faArrowUp","faArrowDown","Collapse","map","ingredient","index","key","direction","RecipeModal","open","submitModal","closeModal","children","Modal","centered","fade","ModalHeader","ModalBody","ModalFooter","Button","color","size","block","TextInput","label","type","name","value","onChange","errorMessage","rows","FormGroup","Label","Input","invalid","FormFeedback","ImageInput","image","for","id","RecipeList","modalOpen","modalTitle","recipeID","recipeUrl","recipeTitle","recipeIngredients","recipeDirections","errors","openCreateModal","openEditModal","item","join","isValid","split","data","uuidv4","addRecipe","console","log","event","currentTarget","handleLoadLocalFile","files","target","localImageUrl","window","URL","createObjectURL","items","ListGroup","mapDispatchToProps","payload","connect","recipe","INITIAL_STATE","rootReducer","combineReducers","action","filter","persistConfig","storage","persistedReducer","persistReducer","middleware","applyMiddleware","thunk","store","createStore","persistor","persistStore","App","loading","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ec072277.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface Props {\n  src: string;\n  className: string;\n}\n\ninterface States {\n  src: string;\n  failed: boolean;\n}\n\nexport default class ImagePreview extends React.Component<Props, States> {\n  readonly state: States = {\n    src: \"\",\n    failed: false,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: States) {\n    if (nextProps.src !== prevState.src) {\n      return {\n        src: nextProps.src,\n        failed: false,\n      };\n    }\n    return null;\n  }\n\n  onError = () => {\n    this.setState({ failed: true });\n  };\n\n  render() {\n    const { className } = this.props;\n    const { src, failed } = this.state;\n    if (failed || src === \"\" || src === undefined) return null;\n\n    return (\n      <img\n        src={src}\n        className={className}\n        alt=\"recipe\"\n        onError={this.onError}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport { ListGroupItem, Collapse } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faArrowDown,\n  faArrowUp,\n  faTrash,\n  faEdit,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport ImagePreview from \"./ImagePreview\";\n\ninterface Props {\n  title: string;\n  url: string;\n  ingredients: string[];\n  directions: string[];\n  editRecipe: () => void;\n  deleteRecipe: () => void;\n}\n\ninterface States {\n  isOpen: boolean;\n}\n\nexport default class Recipe extends React.Component<Props, States> {\n  readonly state: States = {\n    isOpen: false,\n  };\n\n  toggle = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n  };\n\n  render() {\n    const { isOpen } = this.state;\n    const {\n      url,\n      title,\n      ingredients,\n      directions,\n      editRecipe,\n      deleteRecipe,\n    } = this.props;\n\n    return (\n      <ListGroupItem className=\"recipe\">\n        <span\n          onClick={deleteRecipe}\n          className=\"recipe-action\"\n          data-testid=\"btnDelete\"\n        >\n          <FontAwesomeIcon icon={faTrash} />\n        </span>\n        <span\n          onClick={editRecipe}\n          className=\"recipe-action\"\n          data-testid=\"btnEdit\"\n        >\n          <FontAwesomeIcon icon={faEdit} />\n        </span>\n        <span\n          onClick={this.toggle}\n          className=\"recipe-toggle bg-primary\"\n          data-testid=\"btnToggle\"\n        >\n          <FontAwesomeIcon icon={isOpen ? faArrowUp : faArrowDown} />\n          <span className=\"recipe-title text-white\">{title}</span>\n        </span>\n        <Collapse isOpen={isOpen}>\n          <div className=\"content-recipe\">\n            <ImagePreview src={url} className=\"image-recipe\" />\n            <h4 className=\"text-success\">Ingredients</h4>\n            <ul className=\"square-list\">\n              {ingredients &&\n                ingredients.map((ingredient: string, index: number) => (\n                  <li key={index}>{ingredient}</li>\n                ))}\n            </ul>\n            <h4 className=\"text-success\">Directions</h4>\n            <ul className=\"number-list\">\n              {directions &&\n                directions.map((direction: string, index: number) => (\n                  <li key={index}>{direction}</li>\n                ))}\n            </ul>\n          </div>\n        </Collapse>\n      </ListGroupItem>\n    );\n  }\n}\n","import React from \"react\";\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\n\ninterface MyProps {\n  open: boolean;\n  title: string;\n  submitModal: () => void;\n  closeModal: () => void;\n  children: React.ReactNode;\n}\n\nconst RecipeModal = ({\n  open,\n  submitModal,\n  closeModal,\n  title,\n  children,\n}: MyProps) => (\n  <Modal isOpen={open} centered={true} fade={false}>\n    <ModalHeader toggle={closeModal} className=\"bg-success\">\n      <span className=\"text-white\">{title}</span>\n    </ModalHeader>\n    <ModalBody>{children}</ModalBody>\n    <ModalFooter centered=\"true\">\n      <Button\n        color=\"success\"\n        size=\"lg\"\n        block\n        onClick={submitModal}\n        data-testid=\"btnSave\"\n      >\n        Save\n      </Button>\n    </ModalFooter>\n  </Modal>\n);\n\nexport default RecipeModal;\n","import React from \"react\";\nimport { FormGroup, Label, Input, FormFeedback, InputProps } from \"reactstrap\";\n\nconst TextInput = ({\n  label,\n  type,\n  name,\n  value,\n  onChange,\n  errorMessage,\n  rows,\n}: InputProps) => (\n  <FormGroup>\n    <Label>{label}</Label>\n    <Input\n      type={type}\n      name={name}\n      value={value}\n      onChange={onChange}\n      invalid={errorMessage !== \"\"}\n      rows={rows}\n    />\n    <FormFeedback>{errorMessage}</FormFeedback>\n  </FormGroup>\n);\n\nexport default TextInput;\n","import React from \"react\";\nimport { FormGroup, Label, Input } from \"reactstrap\";\nimport ImagePreview from \"./ImagePreview\";\n\ninterface MyProps {\n  name: string;\n  label: string;\n  image: string;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst ImageInput = ({ label, name, image, onChange }: MyProps) => (\n  <FormGroup className=\"image-group\">\n    <Label for={name} className=\"btn btn-success mt-2\">\n      {label}\n    </Label>\n    <ImagePreview src={image} className=\"image-preview\" />\n    <Input\n      type=\"file\"\n      id={name}\n      name={name}\n      onChange={onChange}\n      className=\"image-input\"\n    />\n  </FormGroup>\n);\n\nexport default ImageInput;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, ListGroup } from \"reactstrap\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { addRecipe, editRecipe, deleteRecipe } from \"../redux/actions\";\nimport { RecipeState } from \"../redux/types\";\nimport { AppState } from \"../redux/reducers\";\nimport Recipe from \"./Recipe\";\nimport RecipeModal from \"./RecipeModal\";\nimport TextInput from \"./TextInput\";\nimport ImageInput from \"./ImageInput\";\n\ninterface Props {\n  items: Array<RecipeState>;\n  addRecipe: typeof addRecipe;\n  editRecipe: typeof editRecipe;\n  deleteRecipe: typeof deleteRecipe;\n}\n\ninterface Errors {\n  recipeTitle: string;\n  recipeIngredients: string;\n  recipeDirections: string;\n}\n\ninterface States {\n  modalOpen: boolean;\n  modalTitle: string;\n  recipeID: string | null;\n  recipeUrl: string;\n  recipeTitle: string;\n  recipeIngredients: string;\n  recipeDirections: string;\n  errors: Errors;\n}\n\nclass RecipeList extends React.Component<Props, States> {\n  readonly state: States = {\n    modalOpen: false,\n    modalTitle: \"\",\n    recipeID: null,\n    recipeUrl: \"\",\n    recipeTitle: \"\",\n    recipeIngredients: \"\",\n    recipeDirections: \"\",\n    errors: {\n      recipeTitle: \"\",\n      recipeIngredients: \"\",\n      recipeDirections: \"\",\n    },\n  };\n\n  openCreateModal = () => {\n    this.setState({\n      modalOpen: true,\n      modalTitle: \"New Recipe\",\n      recipeID: null,\n      recipeUrl: \"\",\n      recipeTitle: \"\",\n      recipeIngredients: \"\",\n      recipeDirections: \"\",\n    });\n  };\n\n  openEditModal = (item: RecipeState) => {\n    const recipeIngredients = item.ingredients.join(\",\");\n    const recipeDirections = item.directions.join(\",\");\n\n    this.setState({\n      modalOpen: true,\n      modalTitle: `Edit ${item.title}`,\n      recipeID: item.id,\n      recipeUrl: item.url,\n      recipeTitle: item.title,\n      recipeIngredients,\n      recipeDirections,\n    });\n  };\n\n  submitModal = () => {\n    const {\n      recipeID,\n      recipeUrl,\n      recipeTitle,\n      recipeIngredients,\n      recipeDirections,\n      errors,\n    } = this.state;\n\n    let isValid = true;\n\n    if (recipeTitle === \"\") {\n      isValid = false;\n      errors.recipeTitle = \"Please enter a name\";\n    }\n\n    if (recipeIngredients === \"\") {\n      isValid = false;\n      errors.recipeIngredients = \"Please enter ingredients\";\n    }\n\n    if (recipeDirections === \"\") {\n      isValid = false;\n      errors.recipeDirections = \"Please enter a directions\";\n    }\n\n    if (isValid === false) {\n      this.setState({ errors });\n      return false;\n    }\n\n    const ingredients = recipeIngredients.split(\",\");\n    const directions = recipeDirections.split(\",\");\n\n    const data: RecipeState = {\n      id: recipeID === null ? uuidv4() : recipeID,\n      url: recipeUrl,\n      title: recipeTitle,\n      ingredients,\n      directions,\n    };\n\n    if (recipeID === null) {\n      this.props.addRecipe(data);\n    } else {\n      this.props.editRecipe(data);\n    }\n\n    this.closeModal();\n    console.log(\"dsdsa\");\n  };\n\n  deleteRecipe = (item: RecipeState) => {\n    this.props.deleteRecipe(item);\n  };\n\n  closeModal = () => {\n    this.setState({\n      modalOpen: false,\n      errors: {\n        recipeTitle: \"\",\n        recipeIngredients: \"\",\n        recipeDirections: \"\",\n      },\n    });\n  };\n\n  onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const key = event.currentTarget.name;\n    const value = event.currentTarget.value;\n    const errors = { ...this.state.errors, [key]: \"\" };\n\n    this.setState<never>({ [key]: value, errors });\n  };\n\n  handleLoadLocalFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { files } = event.target;\n    if (files) {\n      const localImageUrl = window.URL.createObjectURL(files[0]);\n      this.setState({ recipeUrl: localImageUrl });\n    }\n  };\n\n  render() {\n    const {\n      modalOpen,\n      modalTitle,\n      recipeTitle,\n      recipeUrl,\n      recipeIngredients,\n      recipeDirections,\n    } = this.state;\n    const { items } = this.props;\n\n    return (\n      <div className=\"container\">\n        <Button color=\"primary\" size=\"lg\" block onClick={this.openCreateModal}>\n          Add Recipe\n        </Button>\n        <ListGroup className=\"recipe-list\">\n          {items &&\n            items.map((item: RecipeState, index: number) => (\n              <Recipe\n                key={index}\n                url={item.url}\n                title={item.title}\n                ingredients={item.ingredients}\n                directions={item.directions}\n                editRecipe={() => this.openEditModal(item)}\n                deleteRecipe={() => this.deleteRecipe(item)}\n              />\n            ))}\n        </ListGroup>\n        <RecipeModal\n          open={modalOpen}\n          title={modalTitle}\n          submitModal={this.submitModal}\n          closeModal={this.closeModal}\n        >\n          <ImageInput\n            name=\"recipeUrl\"\n            label=\"Select Image\"\n            image={recipeUrl}\n            onChange={this.handleLoadLocalFile}\n          />\n          <TextInput\n            name=\"recipeTitle\"\n            label=\"Title\"\n            type=\"text\"\n            value={recipeTitle}\n            onChange={this.onChange}\n            errorMessage={this.state.errors.recipeTitle}\n          />\n          <TextInput\n            name=\"recipeIngredients\"\n            label=\"Ingredients (separate by comma)\"\n            type=\"textarea\"\n            value={recipeIngredients}\n            onChange={this.onChange}\n            errorMessage={this.state.errors.recipeIngredients}\n            rows={3}\n          />\n          <TextInput\n            name=\"recipeDirections\"\n            label=\"Directions (separate by comma)\"\n            type=\"textarea\"\n            value={recipeDirections}\n            onChange={this.onChange}\n            errorMessage={this.state.errors.recipeDirections}\n            rows={7}\n          />\n        </RecipeModal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ recipe }: AppState) => {\n  const { items } = recipe;\n  return { items };\n};\n\nconst mapDispatchToProps = {\n  addRecipe,\n  editRecipe,\n  deleteRecipe,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecipeList);\n","import { ADD_RECIPE, EDIT_RECIPE, DELETE_RECIPE, RecipeState } from \"../types\";\n\nexport const addRecipe = (payload: RecipeState) => {\n  return {\n    type: ADD_RECIPE,\n    payload,\n  };\n};\n\nexport const editRecipe = (payload: RecipeState) => {\n  return {\n    type: EDIT_RECIPE,\n    payload,\n  };\n};\n\nexport const deleteRecipe = (payload: RecipeState) => {\n  return {\n    type: DELETE_RECIPE,\n    payload,\n  };\n};\n","export const ADD_RECIPE = \"ADD_RECIPE\";\nexport const EDIT_RECIPE = \"EDIT_RECIPE\";\nexport const DELETE_RECIPE = \"DELETE_RECIPE\";\n\nexport interface RecipeState {\n  id: string;\n  url: string;\n  title: string;\n  ingredients: string[];\n  directions: string[];\n}\n\nexport interface RecipeListState {\n  items: Array<RecipeState>;\n}\n\ninterface AddRecipeAction {\n  type: typeof ADD_RECIPE;\n  payload: RecipeState;\n}\n\ninterface EditRecipeAction {\n  type: typeof EDIT_RECIPE;\n  payload: RecipeState;\n}\n\ninterface DeleteRecipeAction {\n  type: typeof DELETE_RECIPE;\n  payload: RecipeState;\n}\n\nexport type RecipeActionTypes =\n  | AddRecipeAction\n  | EditRecipeAction\n  | DeleteRecipeAction;\n","import {\n  ADD_RECIPE,\n  EDIT_RECIPE,\n  DELETE_RECIPE,\n  RecipeListState,\n  RecipeState,\n  RecipeActionTypes,\n} from \"../types\";\nimport { recipes } from \"../../config/recipes\";\n\nexport const INITIAL_STATE: RecipeListState = {\n  items: recipes,\n};\n\nexport function reducer(state = INITIAL_STATE, action: RecipeActionTypes) {\n  switch (action.type) {\n    case ADD_RECIPE:\n      return {\n        ...state,\n        items: [...state.items, action.payload],\n      };\n    case EDIT_RECIPE:\n      return {\n        ...state,\n        items: state.items.map((item: RecipeState) =>\n          item.id === action.payload.id ? action.payload : item\n        ),\n      };\n    case DELETE_RECIPE:\n      return {\n        ...state,\n        items: state.items.filter(\n          (item: RecipeState) => item.id !== action.payload.id\n        ),\n      };\n    default:\n      return state;\n  }\n}\n","import { RecipeState } from \"../redux/types\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport const recipes: Array<RecipeState> = [\n  {\n    id: uuidv4(),\n    url:\n      \"https://raw.githubusercontent.com/Timc3209/recipe-app/master/src/assets/images/taco.jpg\",\n    title: \"Beef Tacos\",\n    ingredients: [\n      \"1 pound ground beef\",\n      \"1 cup salsa\",\n      \"10 taco shells\",\n      \"1/2 head lettuce\",\n      \"1 medium tomato\",\n      \"1 1/2 cup shredded cheese\",\n    ],\n    directions: [\n      \"Cook beef in 10-inch skillet over medium heat 8 to 10 minutes. stirring occasionally until brown\",\n      \"Stir salsa into beef. Heat to boiling stirring constantly; reduce heat to medium-low. Cook 5 minutes stirring occasionally. Pour beef mixture into large serving bowl.\",\n      \"Heat taco shells as directed on package. Serve taco shells with beef mixture lettuce tomato and cheese.\",\n    ],\n  },\n  {\n    id: uuidv4(),\n    url:\n      \"https://raw.githubusercontent.com/Timc3209/recipe-app/master/src/assets/images/enchilada.jpg\",\n    title: \"Beef Enchiladas\",\n    ingredients: [\n      \"1 pound ground beef\",\n      \"1 can red enchilada sauce\",\n      \"1 can chopped green chiles\",\n      \"1 package flour tortillas (6 inch)\",\n      \"1 1/2 cup shredded cheese\",\n    ],\n    directions: [\n      \"Heat oven to 375°F. Spray 13x9-inch (3-quart) baking dish or pan with cooking spray.\",\n      \"In 10-inch nonstick skillet cook beef over medium-high heat 5 to 7 minutes stirring occasionally until thoroughly cooked. Stir in 1/2 cup of the enchilada sauce and the chiles.\",\n      \"Spread 1/2 cup of the enchilada sauce evenly in baking dish. Spread 1/4 cup beef mixture down center of each tortilla; sprinkle with 1 tablespoon cheese. Wrap tortillas tightly around filling placing seam side down in baking dish. Top with remaining enchilada sauce. Sprinkle with remaining cheese.\",\n      \"Bake 20 to 25 minutes or until hot and bubbly. Let stand 5 minutes before serving.\",\n    ],\n  },\n  {\n    id: uuidv4(),\n    url:\n      \"https://raw.githubusercontent.com/Timc3209/recipe-app/master/src/assets/images/quesadilla.jpg\",\n    title: \"Chicken Quesadillas\",\n    ingredients: [\n      \"6 oz chicken breast strips\",\n      \"1 cup salsa\",\n      \"1 package flour tortillas (8 inch)\",\n      \"2 cups shredded cheese\",\n      \"1/4 cup sour cream\",\n    ],\n    directions: [\n      \"Cut chicken into bite-size pieces. In small bowl mix chicken and salsa.\",\n      \"Spray 1 side of 1 tortilla with cooking spray; place sprayed side down on work surface. Layer with one-fourth of the chicken mixture and 1/2 cup of the cheese. Top with another tortilla; spray top of tortilla with cooking spray.\",\n      \"Cook in 10-inch nonstick skillet over medium heat 4 to 6 minutes carefully turning after 2 minutes until golden brown. Repeat with remaining tortillas chicken mixture and cheese. To serve cut quesadillas into wedges. Serve with sour cream and salsa.\",\n    ],\n  },\n];\n","import { combineReducers } from \"redux\";\nimport * as recipeReducer from \"./recipeReducer\";\nimport { RecipeListState } from \"../types\";\n\nexport interface AppState {\n  recipe: RecipeListState;\n}\n\nexport const AppInitialState: AppState = {\n  recipe: recipeReducer.INITIAL_STATE,\n};\n\nexport const rootReducer = combineReducers({\n  recipe: recipeReducer.reducer,\n});\n","import { applyMiddleware, createStore } from \"redux\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport thunk from \"redux-thunk\";\nimport { AppState, rootReducer } from \"./reducers\";\n\nconst persistConfig = {\n  key: \"main\",\n  storage,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst persistedReducer = persistReducer<AppState, any>(\n  persistConfig,\n  rootReducer\n);\n\nconst middleware = applyMiddleware(thunk);\nconst store = createStore(persistedReducer, middleware);\nconst persistor = persistStore(store);\nexport { store, persistor };\n","import React from \"react\";\nimport RecipeList from \"./components/RecipeList\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./redux/store\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./assets/css/App.css\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <div className=\"App\">\n          <header className=\"header\">\n            <h1 className=\"text-success\">Recipe App</h1>\n          </header>\n          <RecipeList />\n        </div>\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}